# Python stubs generated by omniidl from LoginService.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "LoginService"
#
__name__ = "LoginService"
_0_LoginService = omniORB.openModule("LoginService", r"LoginService.idl")
_0_LoginService__POA = omniORB.openModule("LoginService__POA", r"LoginService.idl")


# interface Login
_0_LoginService._d_Login = (omniORB.tcInternal.tv_objref, "IDL:LoginService/Login:1.0", "Login")
omniORB.typeMapping["IDL:LoginService/Login:1.0"] = _0_LoginService._d_Login
_0_LoginService.Login = omniORB.newEmptyClass()
class Login :
    _NP_RepositoryId = _0_LoginService._d_Login[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_LoginService.Login = Login
_0_LoginService._tc_Login = omniORB.tcInternal.createTypeCode(_0_LoginService._d_Login)
omniORB.registerType(Login._NP_RepositoryId, _0_LoginService._d_Login, _0_LoginService._tc_Login)

# Login operations and attributes
Login._d_checkExist = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
Login._d_checkActive = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
Login._d_checkUser = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
Login._d_logout = (((omniORB.tcInternal.tv_string,0), ), (), None)

# Login object reference
class _objref_Login (CORBA.Object):
    _NP_RepositoryId = Login._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def checkExist(self, *args):
        return self._obj.invoke("checkExist", _0_LoginService.Login._d_checkExist, args)

    def checkActive(self, *args):
        return self._obj.invoke("checkActive", _0_LoginService.Login._d_checkActive, args)

    def checkUser(self, *args):
        return self._obj.invoke("checkUser", _0_LoginService.Login._d_checkUser, args)

    def logout(self, *args):
        return self._obj.invoke("logout", _0_LoginService.Login._d_logout, args)

omniORB.registerObjref(Login._NP_RepositoryId, _objref_Login)
_0_LoginService._objref_Login = _objref_Login
del Login, _objref_Login

# Login skeleton
__name__ = "LoginService__POA"
class Login (PortableServer.Servant):
    _NP_RepositoryId = _0_LoginService.Login._NP_RepositoryId


    _omni_op_d = {"checkExist": _0_LoginService.Login._d_checkExist, "checkActive": _0_LoginService.Login._d_checkActive, "checkUser": _0_LoginService.Login._d_checkUser, "logout": _0_LoginService.Login._d_logout}

Login._omni_skeleton = Login
_0_LoginService__POA.Login = Login
omniORB.registerSkeleton(Login._NP_RepositoryId, Login)
__name__ = "LoginService"

#
# End of module "LoginService"
#
__name__ = "LoginService_idl"

_exported_modules = ( "LoginService", )

# The end.
