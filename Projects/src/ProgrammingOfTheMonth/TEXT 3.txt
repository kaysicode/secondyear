And with thir darkness durst affront his light.
First Moloch, horrid King besmear'd with blood
Of human sacrifice, and parents tears,
Though for the noyse of Drums and Timbrels loud
Thir childrens cries unheard, that past through fire
To his grim Idol. Him the Ammonite
Worshipt in Rabba and her watry Plain,
In Argob and in Basan, to the stream
Of utmost Arnon. Not content with such
Audacious neighbourhood, the wisest heart
Of Solomon he led by fraud to build
His Temple right against the Temple of God
On that opprobrious Hill, and made his Grove
The pleasant Vally of Hinnom, Tophet thence
And black Gehenna call'd, the Type of Hell.
Next Chemos, th' obscene dread of Moabs Sons,
From Aroar to Nebo, and the wild
Of Southmost Abarim; in Hesebon
And Heronaim, Seons Realm, beyond
The flowry Dale of Sibma clad with Vines,
And Eleale to th' Asphaltick Pool.
Peor his other Name, when he entic'd
Israel in Sittim on thir march from Nile
To do him wanton rites, which cost them woe.
Yet thence his lustful Orgies he enlarg'd
Even to that Hill of scandal, but the Grove
Of Moloch homicide, lust hard by hate;
Till good Josiah drove them hence to Hell.
With these cam they, who from the bordring flood
Of old Euphrates to the Brook that parts
Egypt from Syrian ground, had general names
Of Baalim and Ashtaroth, those male,
These Feminine. For Spirits when they please
Can either Sex assume, or both; so soft
And uncompounded is thir Essence pure,
Nor ti'd or manacl'd with joynt or limb,
Nor founded on the brittle strength of bones,
Like cumbrous flesh; but in what shape they choose
Dilated or condens't, bright or obscure,
Can execute thir aerie purposes,
And works of love or enmity fulfill.
For those the Race of Israel oft forsook
Thir living strength, and unfrequented left
His righteous Altar, bowing lowly down
To bestial Gods; for which thir heads as low
Bow'd down in Battel, sunk before the Spear
Of despicable foes. With these in troop
Came Astoreth, whom the Phoenicians call'd
Astarte, Queen of Heav'n, with crescent Horns;
To whose bright Image nightly by the Moon
Sidonian Virgins paid thir Vows and Songs,
In Sion also not unsung, where stood
Her Temple on th' offensive Mountain, built
By that uxorious King, whose heart though large,
Beguil'd by fair Idolatresses, fell
To idols foul. Thammuz came next behind,
Whose annual wound in Lebanon allur'd
The Syrian Damsels to lament his fate
In amorous dittyes all a Summers day,
While smooth Adonis from his native Rock
Ran purple to the Sea, suppos'd with blood
Of Thammuz yearly wounded; the Love-tale
Infected Sions daughters with like heat,
Whose wanton passions in the sacred Porch
Ezekial saw, when by the Vision led
His eye survay'd the dark Idolatries
Of alienated Judah. Next came one
Who mourn'd in earnest, when the Captive Ark
Maim'd his brute Image, head and hands lopt off
In his own Temple, on the grunsel edge,
Where he fell flat, and sham'd his Worshipers:
Dagon his Name, Sea Monster, upward Man
And downward Fish: yet had his Temple high
Rear'd in Azotus, dreaded through the Coast
Of Palestine, in Gath and Ascalon
And Accaron and Gaza's frontier bounds.
Him follow'd Rimmon, whose delightful Seat
Was fair Damascus, on the fertil Banks
Of Abbana and Pharphar, lucid streams.
He also against the house of God was bold:
A Leper once he lost and gain'd a King,
Ahaz his sottish Conquerour, whom he drew
Gods Altar to disparage and displace
For one of Syrian mode, whereon to burn
His odious offrings, and adore the Gods
Whom he had vanquisht. After these appear'd
A crew who under Names of old Renown,
Osiris, Isis, Orus and thir Train
With monstrous shapes and sorceries abus'd
Fanatic Egypt and her Priests, to seek
Thir wandring Gods Disguis'd in brutish forms
Rather then human. Nor did Israel scape
Th' infection when thir borrow'd Gold compos'd
The Calf in Oreb: and the Rebel King
Doubl'd that sin in Bethel and in Dan,
Lik'ning his Maker to the Grazed Ox,
Jehovah, who in one Night when he pass'd
From Egypt marching, equal'd with one stroke
Both her first born and all her bleating Gods
Belial came last, then whom a Spirit more lewd
Fell not from Heaven, or more gross to love
Vice for it self: To him no Temple stood
Or Altar smoak'd; yet who more oft then hee
In Temples and at Altars, when the Priest
Turns Atheist, as did Ely's Sons, who fill'd
With lust and violence the house of God.
In Courts and Palaces he also Reigns
And in luxurious Cities, where the noyse
Of riot ascends above thir loftiest Towrs,
And injury and outrage: And when Night
Darkens the Streets, then wander forth the Sons
Of Belial, flown with insolence and wine.
Witness the Streets of Sodom, and that night
In Gibeah, when the hospitable door
Expos'd a Matron to avoid worse rape.
These were the prime in order and in might;
The rest were long to tell, though far renown'd,
Th' Ionian Gods, of Javans issue held
Gods, yet confest later then Heav'n and Earth
Thir boasted Parents; Titan Heav'ns first born
With his enormous brood, and birthright seis'd
By younger Saturn, he from mightier Jove
His own and Rhea's Son like measure found;
So Jove usurping reign'd: these first in Creet
And Ida known, thence on the Snowy top
Of cold Olympus rul'd the middle Air
Thir highest Heav'n; or on the Delphian Cliff,
Or in Dodona, and through all the bounds
Of Doric Land; or who with Saturn old
Fled over Adria to th' Hesperian Fields,
And ore the Celtic roam'd the utmost Isles.
All these and more came flocking; but with looks
Down cast and damp, yet such wherein appear'd
Obscure some glimps of joy, to have found thir chief
Not in despair, to have found themselves not lost
In loss itself; which on his count'nance cast
Like doubtful hue: but he his wonted pride
Soon recollecting, with high words, that bore
Semblance of worth, not substance, gently rais'd
Thir fanting courage, and dispel'd thir fears.
Then strait commands that at the warlike sound
Of Trumpets loud and Clarions be upreard
His mighty Standard; that proud honour claim'd
Azazel as his right, a Cherube tall:
Who forthwith from the glittering Staff unfurld
Th' Imperial Ensign, which full high advanc't
Shon like a Meteor streaming to the Wind
With Gemms and Golden lustre rich imblaz'd,
Seraphic arms and Trophies: all the while
Sonorous mettal blowing Martial sounds:
At which the universal Host upsent
A shout that tore Hells Concave, and beyond
Frighted the Reign of Chaos and old Night.
All in a moment through the gloom were seen
Ten thousand Banners rise into the Air
With Orient Colours waving: with them rose
A Forrest huge of Spears: and thronging Helms
Appear'd, and serried Shields in thick array
Of depth immeasurable: Anon they move
In perfect Phalanx to the Dorian mood
Of Flutes and soft Recorders; such as rais'd
To hight of noblest temper Hero's old
Arming to Battel, and in stead of rage
Deliberate valour breath'd, firm and unmov'd
With dread of death to flight or foul retreat,
Nor wanting power to mitigate and swage
With solemn touches, troubl'd thoughts, and chase
Anguish and doubt and fear and sorrow and pain
From mortal or immortal minds. Thus they
Breathing united force with fixed thought
Mov'd on in silence to soft Pipes that charm'd
Thir painful steps o're the burnt soyle; and now
Advanc't in view, they stand, a horrid Front
Of dreadful length and dazling Arms, in guise
Of Warriers old with order'd Spear and Shield,
Awaiting what command thir mighty Chief
Had to impose: He through the armed Files
Darts his experienc't eye, and soon traverse
The whole Battalion views, thir order due,
Thir visages and stature as of Gods,
Thir number last he summs. And now his heart
Distends with pride, and hardning in his strength
Glories: For never since created man,
Met such imbodied force, as nam'd with these
Could merit more then that small infantry
Warr'd on by Cranes: though all the Giant brood
Of Phlegra with th' Heroic Race were joyn'd
That fought at Theb's and Ilium, on each side
Mixt with auxiliar Gods; and what resounds
In Fable or Romance of Uthers Sons
Begirt with British and Armoric Knights;
And all who since Baptiz'd or Infidel
Jousted in Aspramont or Montalban,
Damasco, or Marocco, or Trebisond
Or whom Biserta sent from Afric shore
When Charlemain with all his Peerage fell
By Fontarabbia. Thus far these beyond
Compare of mortal prowess, yet observ'd
Thir dread commander: he above the rest
In shape and gesture proudly eminent
Stood like a Towr; his form had yet not lost
All her Original brightness, nor appear'd
Less then Arch Angel ruind, and th' excess
Of Glory obscur'd; As when the Sun new ris'n
Looks through the Horizontal misty Air
Shorn of his Beams, or from behind the Moon
In dim Eclips disastrous twilight sheds
On half the Nations, and with fear of change
Perplexes Monarch. Dark'n'd so, yet shon
Above them all th' Arch Angel; but his face
Deep scars of Thunder had intrencht, and care
Sat on his faded cheek, but under Browes
Of dauntless courage, and considerate Pride
Waiting revenge: cruel his eye, but cast
Signs of remorse and passion to behold
The fellows of his crime, the followers rather
(Far other once beheld in bliss) condemn'd
For ever now to have thir lot in pain,
Millions of Spirits for his fault amerc't
Of Heav'n, and from Eternal Splendors flung
For his revolt, yet faithfull how they stood,
Thir Glory witherd. As when Heavens Fire
Hath scath'd the Forrest Oaks, or Mountain Pines,
With singed top thir stately growth though bare
Stands on the blasted Heath. He now prepar'd
To speak; whereat thir doubl'd Ranks they bend
From wing to wing, and half enclose him round
With all his Peers: attention held them mute.
Thrice he assayd, and thrice in spight of scorn,
Tears such as Angels weep, burst forth: at last
Words interwove with sighs found out thir way.

O Myriads of immortal Spirits, O Powers
Matchless, but with th' Almighty, and that strife
Was not inglorious, though th' event was dire,
As this place testifies, and this dire change
Hateful to utter: but what power of mind
Foreseeing or presaging, from the Depth
Of knowledge past or present, could have fear'd,
How such united force of Gods, how such
As stood like these, could ever know repulse?
For who can yet beleeve, though after loss,
That all these puissant Legions, whose exile
Hath emptied Heav'n, shall fail to re-ascend
Self-rais'd, and repossess thir native seat?
For mee be witness all the Host of Heav'n,
If counsels different, or danger shun'd
By mee, have lost our hopes. But he who reigns
Monarch in Heav'n, till then as one secure
Sat on his Throne, upheld by old repute,
Consent or custome, and his Regal State
Put forth at full, but still his strength conceal'd,
Which tempted our attempt, and wrought our fall.
Henceforth his might we know, and know our own
So as not either to provoke, or dread
New warr, provok't; our better part remains
To work in close design, by fraud or guile
What force effected not: that he no less
At length from us may find, who overcomes
By force, hath overcome but half his foe.
Space may produce new Worlds; whereof so rife
There went a fame in Heav'n that he ere long
Intended to create, and therein plant
A generation, whom his choice regard
Should favour equal to the Sons of Heaven:
Thither, if but to pry, shall be perhaps
Our first eruption, thither or elsewhere:
For this Infernal Pit shall never hold
Caelestial Spirits in Bondage, nor th' Abyss
Long under darkness cover. But these thoughts
Full Counsel must mature: Peace is despaird,
For who can think Submission? Warr then, Warr
Open or understood must be resolv'd.

He spake: and to confirm his words, out-flew
Millions of flaming swords, drawn from the thighs
Of mighty Cherubim; the sudden blaze
Far round illumin'd hell: highly they rag'd
Against the Highest, and fierce with grasped Arms
Clash'd on thir sounding Shields the din of war,
Hurling defiance toward the Vault of Heav'n.

There stood a hill not far whose griesly top
Belch'd fire and rowling smoak; the rest entire
Shon with a glossie scurff, undoubted sign
That in his womb was hid metallic Ore,
The work of Sulphur. Thither wing'd with speed
A numerous Brigad hasten'd. As when Bands
Of Pioners with Spade and Pickax arm'd
Forerun the Royal Camp, to trench a Field,
Or cast a Rampart. Mammon led them on,
Mammon, the least erected Spirit that fell
From heav'n, for ev'n in heav'n his looks and thoughts
Were always downward bent, admiring more
The riches of Heav'ns pavement, trod'n Gold,
Then aught divine or holy else enjoy'd
In vision beatific: by him first
Men also, and by his suggestion taught
Ransack'd the Center, and with impious hands
Rifl'd the bowels of thir mother Earth
For Treasures better hid. Soon had his crew
Op'nd into the Hill a spacious wound
And dig'd out ribs of Gold. Let none admire
That riches grow in Hell; that soyle may best
Deserve the precious bane. And here let those
Who boast in mortal things, and wond'ring tell
Of Babel, and the works of Memphian Kings
Learn how thir greatest Monuments of Fame,
And Strength and Art are easily out-done
By Spirits reprobate, and in an hour
What in an age they with incessant toyle
And hands innumerable scarce perform.
Nigh on the Plain in many cells prepar'd
That underneath had veins of liquid fire
Sluc'd from the Lake, a second multitude
With wond'rous Art found out the massie Ore,
Severing each kind, and scum'd the Bullion dross:
A third as soon had form'd within the ground
A various mould, and from the boyling cells
By strange conveyance fill'd each hollow nook,
As in an Organ from one blast of wind
To many a row of Pipes the sound-board breaths.
Anon out of the earth a Fabrick huge
Rose like an Exhalation, with the sound
Of Dulcet Symphonies and voices sweet,
Built like a Temple, where Pilasters round
Were set, and Doric pillars overlaid
With Golden Architrave; nor did there want
Cornice or Freeze, with bossy Sculptures grav'n,
The Roof was fretted Gold. Not Babilon,
Nor great Alcairo such magnificence
Equal'd in all thir glories, to inshrine
Belus or Serapis thir Gods, or seat
Thir Kings, when Aegypt with Assyria strove
In wealth and luxurie. Th' ascending pile
Stood fixt her stately highth, and strait the dores
Op'ning thir brazen foulds discover wide
Within, her ample spaces, o're the smooth
And level pavement: from the arched roof
Pendant by suttle Magic many a row
Of Starry Lamps and blazing Cressets fed
With Naphtha and Asphaltus yeilded light
As from a sky. The hasty multitude
Admiring enter'd, and the work some praise
And some the Architect: his hand was known
In Heav'n by many a Towred structure high,
Where Scepter'd Angels held thir residence,
And sat as Princes, whom the supreme King
Exalted to such power, and gave to rule,
Each in his Hierarchie, the Orders bright.
Nor was his name unheard or unador'd
In ancient Greece; and in Ausonian land
Men call'd him Mulciber; and how he fell
From Heav'n, they fabl'd, thrown by angry Jove
Sheer o're the Chrystal Battlements; from Morn
To Noon he fell, from Noon to dewy Eve,
A Summers day; and with the setting Sun
Dropt from the Zenith like a falling Star,
On Lemnos th' Aegaean Ile: thus they relate,
Erring; for he with this rebellious rout
Fell long before; nor aught avail'd him now
To have built in Heav'n high Towrs; nor did he scape
By all his Engins, but was headlong sent
With his industrious crew to build in hell.
Mean while the winged Haralds by command
Of Sovran power, with awful Ceremony
And Trumpets sound throughout the Host proclaim
A solemn Councel forthwith to be held
At Pandaemonium, the high Capital
Of Satan and his Peers: thir summons call'd
From every Band and squared Regiment
By place or choice the worthiest; they anon
With hunderds and with thousands trooping came
Attended: all access was throng'd, the Gates
And Porches wide, but chief the spacious Hall
(Though like a cover'd field, where Champions bold
Wont ride in arm'd, and at the Soldans chair
Defi'd the best of Panim chivalry
To mortal combat or carreer with Lance)
Thick swarm'd, both on the ground and in the air,
Brusht with the hiss of russling wings. As Bees
In spring time, when the Sun with Taurus rides,
Pour forth thir populous youth about the Hive
In clusters; they among fresh dews and flowers
Flie to and fro, or on the smoothed Plank,
The suburb of thir Straw-built Cittadel,
New rub'd with Baum, expatiate and confer
Thir State affairs. So thick the aerie crowd
Swarm'd and were straitn'd; till the Signal giv'n
Behold a wonder! they but now who seemd
In bigness to surpass Earths Giant Sons
Now less then smallest Dwarfs, in narrow room
Throng numberless, like that Pigmean Race
Beyond the Indian Mount, or Faerie Elves,
Whose midnight Revels, by a Forrest side
Or Fountain some belated Peasant sees,
Or dreams he sees, while over-head the Moon
Sits Arbitress, and neerer to the Earth
Wheels her pale course, they on thir mirth and dance
Intent, with jocond Music charm his ear;
At once with joy and fear his heart rebounds.
Thus incorporeal Spirits to smallest forms
Reduc'd thir shapes immense, and were at large,
Though without number still amidst the Hall
Of that infernal Court. But far within
And in thir own dimensions like themselves
The great Seraphic Lords and Cherubim
In close recess and secret conclave sat
A thousand Demy-Gods on golden seat's,
Frequent and full. After short silence then
And summons read, the great consult began.
